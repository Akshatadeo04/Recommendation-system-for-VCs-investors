{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "cxHFpHfOI7pq"
   },
   "source": [
    "# Recommendation System for Venture Capital Investors - Team 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 496
    },
    "colab_type": "code",
    "id": "c_2HrA-CKlxz",
    "outputId": "2c09ebfa-5bdc-41aa-b8e6-3d9ce31c0146"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 52870 entries, 0 to 52869\n",
      "Data columns (total 20 columns):\n",
      "company_permalink         52869 non-null object\n",
      "company_name              52869 non-null object\n",
      "company_category_code     52227 non-null object\n",
      "company_country_code      52869 non-null object\n",
      "company_state_code        52378 non-null object\n",
      "company_region            52869 non-null object\n",
      "company_city              52337 non-null object\n",
      "investor_permalink        52868 non-null object\n",
      "investor_name             52868 non-null object\n",
      "investor_category_code    2443 non-null object\n",
      "investor_country_code     40869 non-null object\n",
      "investor_state_code       36061 non-null object\n",
      "investor_region           52868 non-null object\n",
      "investor_city             40390 non-null object\n",
      "funding_round_type        52867 non-null object\n",
      "funded_at                 52867 non-null object\n",
      "funded_month              52867 non-null object\n",
      "funded_quarter            52867 non-null object\n",
      "funded_year               52867 non-null float64\n",
      "raised_amount_usd         49271 non-null float64\n",
      "dtypes: float64(2), object(18)\n",
      "memory usage: 8.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv(\"/Users/Keerthy/Desktop/summer/new/Final_UI/Data/crunchbase-investments.csv\", encoding='unicode_escape',low_memory=False)\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 278
    },
    "colab_type": "code",
    "id": "-95fNO5JMA0r",
    "outputId": "aba02e8d-e9c3-4f9d-c44c-750702706606"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>company_name</th>\n",
       "      <th>company_category_code</th>\n",
       "      <th>company_country_code</th>\n",
       "      <th>company_state_code</th>\n",
       "      <th>company_region</th>\n",
       "      <th>company_city</th>\n",
       "      <th>investor_permalink</th>\n",
       "      <th>investor_name</th>\n",
       "      <th>investor_category_code</th>\n",
       "      <th>investor_country_code</th>\n",
       "      <th>investor_state_code</th>\n",
       "      <th>investor_region</th>\n",
       "      <th>investor_city</th>\n",
       "      <th>funding_round_type</th>\n",
       "      <th>funded_at</th>\n",
       "      <th>funded_month</th>\n",
       "      <th>funded_quarter</th>\n",
       "      <th>funded_year</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/company/advercar</td>\n",
       "      <td>AdverCar</td>\n",
       "      <td>advertising</td>\n",
       "      <td>USA</td>\n",
       "      <td>CA</td>\n",
       "      <td>SF Bay</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>/company/1-800-flowers-com</td>\n",
       "      <td>1-800-FLOWERS.COM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>NY</td>\n",
       "      <td>New York</td>\n",
       "      <td>New York</td>\n",
       "      <td>series-a</td>\n",
       "      <td>2012-10-30</td>\n",
       "      <td>2012-10</td>\n",
       "      <td>2012-Q4</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>2000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/company/launchgram</td>\n",
       "      <td>LaunchGram</td>\n",
       "      <td>news</td>\n",
       "      <td>USA</td>\n",
       "      <td>CA</td>\n",
       "      <td>SF Bay</td>\n",
       "      <td>Mountain View</td>\n",
       "      <td>/company/10xelerator</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>finance</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>other</td>\n",
       "      <td>2012-01-23</td>\n",
       "      <td>2012-01</td>\n",
       "      <td>2012-Q1</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/company/utap</td>\n",
       "      <td>uTaP</td>\n",
       "      <td>messaging</td>\n",
       "      <td>USA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States - Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>/company/10xelerator</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>finance</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>other</td>\n",
       "      <td>2012-01-01</td>\n",
       "      <td>2012-01</td>\n",
       "      <td>2012-Q1</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/company/zoopshop</td>\n",
       "      <td>ZoopShop</td>\n",
       "      <td>software</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>columbus</td>\n",
       "      <td>/company/10xelerator</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>finance</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>angel</td>\n",
       "      <td>2012-02-15</td>\n",
       "      <td>2012-02</td>\n",
       "      <td>2012-Q1</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/company/efuneral</td>\n",
       "      <td>eFuneral</td>\n",
       "      <td>web</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Cleveland</td>\n",
       "      <td>Cleveland</td>\n",
       "      <td>/company/10xelerator</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>finance</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>other</td>\n",
       "      <td>2011-09-08</td>\n",
       "      <td>2011-09</td>\n",
       "      <td>2011-Q3</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>/company/tackk</td>\n",
       "      <td>Tackk</td>\n",
       "      <td>web</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Cleveland</td>\n",
       "      <td>Cleveland</td>\n",
       "      <td>/company/10xelerator</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>finance</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>other</td>\n",
       "      <td>2012-02-01</td>\n",
       "      <td>2012-02</td>\n",
       "      <td>2012-Q1</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>/company/acclaimd</td>\n",
       "      <td>Acclaimd</td>\n",
       "      <td>analytics</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>/company/10xelerator</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>finance</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>angel</td>\n",
       "      <td>2012-06-01</td>\n",
       "      <td>2012-06</td>\n",
       "      <td>2012-Q2</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>20000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>/company/acclaimd</td>\n",
       "      <td>Acclaimd</td>\n",
       "      <td>analytics</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>/company/10xelerator</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>finance</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>angel</td>\n",
       "      <td>2012-08-07</td>\n",
       "      <td>2012-08</td>\n",
       "      <td>2012-Q3</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>70000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>/company/toviefor</td>\n",
       "      <td>ToVieFor</td>\n",
       "      <td>ecommerce</td>\n",
       "      <td>USA</td>\n",
       "      <td>NY</td>\n",
       "      <td>New York</td>\n",
       "      <td>New York</td>\n",
       "      <td>/company/2010-nyu-stern-business-plan-competition</td>\n",
       "      <td>2010 NYU Stern Business Plan Competition</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>angel</td>\n",
       "      <td>2010-04-01</td>\n",
       "      <td>2010-04</td>\n",
       "      <td>2010-Q2</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>75000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>/company/ohk-labs</td>\n",
       "      <td>OHK Labs</td>\n",
       "      <td>sports</td>\n",
       "      <td>USA</td>\n",
       "      <td>FL</td>\n",
       "      <td>Palm Beach</td>\n",
       "      <td>Boca Raton</td>\n",
       "      <td>/company/22hundred-group</td>\n",
       "      <td>22Hundred Group</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>angel</td>\n",
       "      <td>2011-09-01</td>\n",
       "      <td>2011-09</td>\n",
       "      <td>2011-Q3</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     company_permalink company_name company_category_code  \\\n",
       "0    /company/advercar     AdverCar           advertising   \n",
       "1  /company/launchgram   LaunchGram                  news   \n",
       "2        /company/utap         uTaP             messaging   \n",
       "3    /company/zoopshop     ZoopShop              software   \n",
       "4    /company/efuneral     eFuneral                   web   \n",
       "5       /company/tackk        Tackk                   web   \n",
       "6    /company/acclaimd     Acclaimd             analytics   \n",
       "7    /company/acclaimd     Acclaimd             analytics   \n",
       "8    /company/toviefor     ToVieFor             ecommerce   \n",
       "9    /company/ohk-labs     OHK Labs                sports   \n",
       "\n",
       "  company_country_code company_state_code         company_region  \\\n",
       "0                  USA                 CA                 SF Bay   \n",
       "1                  USA                 CA                 SF Bay   \n",
       "2                  USA                NaN  United States - Other   \n",
       "3                  USA                 OH               Columbus   \n",
       "4                  USA                 OH              Cleveland   \n",
       "5                  USA                 OH              Cleveland   \n",
       "6                  USA                 OH               Columbus   \n",
       "7                  USA                 OH               Columbus   \n",
       "8                  USA                 NY               New York   \n",
       "9                  USA                 FL             Palm Beach   \n",
       "\n",
       "    company_city                                 investor_permalink  \\\n",
       "0  San Francisco                         /company/1-800-flowers-com   \n",
       "1  Mountain View                               /company/10xelerator   \n",
       "2            NaN                               /company/10xelerator   \n",
       "3       columbus                               /company/10xelerator   \n",
       "4      Cleveland                               /company/10xelerator   \n",
       "5      Cleveland                               /company/10xelerator   \n",
       "6       Columbus                               /company/10xelerator   \n",
       "7       Columbus                               /company/10xelerator   \n",
       "8       New York  /company/2010-nyu-stern-business-plan-competition   \n",
       "9     Boca Raton                           /company/22hundred-group   \n",
       "\n",
       "                              investor_name investor_category_code  \\\n",
       "0                         1-800-FLOWERS.COM                    NaN   \n",
       "1                               10Xelerator                finance   \n",
       "2                               10Xelerator                finance   \n",
       "3                               10Xelerator                finance   \n",
       "4                               10Xelerator                finance   \n",
       "5                               10Xelerator                finance   \n",
       "6                               10Xelerator                finance   \n",
       "7                               10Xelerator                finance   \n",
       "8  2010 NYU Stern Business Plan Competition                    NaN   \n",
       "9                           22Hundred Group                    NaN   \n",
       "\n",
       "  investor_country_code investor_state_code investor_region investor_city  \\\n",
       "0                   USA                  NY        New York      New York   \n",
       "1                   USA                  OH        Columbus      Columbus   \n",
       "2                   USA                  OH        Columbus      Columbus   \n",
       "3                   USA                  OH        Columbus      Columbus   \n",
       "4                   USA                  OH        Columbus      Columbus   \n",
       "5                   USA                  OH        Columbus      Columbus   \n",
       "6                   USA                  OH        Columbus      Columbus   \n",
       "7                   USA                  OH        Columbus      Columbus   \n",
       "8                   NaN                 NaN         unknown           NaN   \n",
       "9                   NaN                 NaN         unknown           NaN   \n",
       "\n",
       "  funding_round_type   funded_at funded_month funded_quarter  funded_year  \\\n",
       "0           series-a  2012-10-30      2012-10        2012-Q4       2012.0   \n",
       "1              other  2012-01-23      2012-01        2012-Q1       2012.0   \n",
       "2              other  2012-01-01      2012-01        2012-Q1       2012.0   \n",
       "3              angel  2012-02-15      2012-02        2012-Q1       2012.0   \n",
       "4              other  2011-09-08      2011-09        2011-Q3       2011.0   \n",
       "5              other  2012-02-01      2012-02        2012-Q1       2012.0   \n",
       "6              angel  2012-06-01      2012-06        2012-Q2       2012.0   \n",
       "7              angel  2012-08-07      2012-08        2012-Q3       2012.0   \n",
       "8              angel  2010-04-01      2010-04        2010-Q2       2010.0   \n",
       "9              angel  2011-09-01      2011-09        2011-Q3       2011.0   \n",
       "\n",
       "   raised_amount_usd  \n",
       "0          2000000.0  \n",
       "1            20000.0  \n",
       "2            20000.0  \n",
       "3            20000.0  \n",
       "4            20000.0  \n",
       "5            20000.0  \n",
       "6            20000.0  \n",
       "7            70000.0  \n",
       "8            75000.0  \n",
       "9           100000.0  "
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Data Analysis and Data Visualization "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Trends over the year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Trends over the year')"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.raised_amount_usd.groupby(df.funded_year).count().plot(kind='line')\n",
    "plt.xlabel('Funded Year')\n",
    "plt.ylabel('Count')\n",
    "plt.title('Trends over the year')\n",
    "#plt.xlim(10.5,16.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Categorization based on type')"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.funded_year.groupby(df.funding_round_type).count().plot(kind='bar', color = 'navy')\n",
    "plt.xlabel('Funding round type')\n",
    "plt.ylabel('Number of Companies')\n",
    "plt.title('Categorization based on type')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "funding_round_type\n",
      "angel              8989\n",
      "crowdfunding          5\n",
      "other               964\n",
      "post-ipo             33\n",
      "private-equity      357\n",
      "series-a          13938\n",
      "series-b           8794\n",
      "series-c+         10870\n",
      "venture            8917\n",
      "Name: funded_year, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df.funded_year.groupby(df.funding_round_type).count())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Huge Valued Startups\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "raised_amount_usd\n",
       "4.300000e+07                            zulily\n",
       "6.000000e+06                            zulily\n",
       "8.500000e+07                            zulily\n",
       "4.600000e+06                            zulily\n",
       "3.000000e+06                              zozi\n",
       "1.000000e+07                              zozi\n",
       "7.000000e+06                              zozi\n",
       "1.300000e+06                              zozi\n",
       "1.000000e+06                              ybuy\n",
       "7.500000e+05                              ybuy\n",
       "5.000000e+05                          yaM Labs\n",
       "5.000000e+06                           y prime\n",
       "7.500000e+06                             xkoto\n",
       "5.350000e+05                             xkoto\n",
       "4.000000e+06                               xAd\n",
       "9.000000e+06                               xAd\n",
       "1.100000e+07                   woodpellets.com\n",
       "2.000000e+04                             wmbly\n",
       "3.000000e+05                   whereIstand.com\n",
       "2.400000e+05                            weendy\n",
       "4.000000e+05                           webmynd\n",
       "6.500000e+05                            walkby\n",
       "1.500000e+06                             vline\n",
       "2.000000e+06                         videoNEXT\n",
       "8.000000e+05                             vidIQ\n",
       "1.000000e+05                            via680\n",
       "7.000000e+05                           userfox\n",
       "2.000000e+03                          uromovie\n",
       "2.300000e+06                             uTest\n",
       "1.300000e+07                             uTest\n",
       "                             ...              \n",
       "1.833300e+04    Agricultural Food Systems, LLC\n",
       "4.130000e+07                           Agensys\n",
       "1.089000e+07                 Affirmed Networks\n",
       "1.359394e+06           Affinimark Technologies\n",
       "2.880000e+05       Aeria Games & Entertainment\n",
       "7.970000e+06                           Aeluros\n",
       "1.925000e+07                     Aduro BioTech\n",
       "3.738201e+06            Adnavance Technologies\n",
       "2.390000e+06                         Addvocate\n",
       "1.583969e+07                           Addepar\n",
       "4.520000e+06                      AdaptiveBlue\n",
       "8.300000e+07                   Acumen Holdings\n",
       "5.010000e+07         Achillion Pharmaceuticals\n",
       "5.922326e+06                         Achievers\n",
       "2.090000e+06                Acendi Interactive\n",
       "1.156700e+04                       Accumetrics\n",
       "3.315000e+06                           Accruit\n",
       "4.690000e+07                   Access MediQuip\n",
       "2.890000e+06               Access Intelligence\n",
       "1.528200e+04                         AccelGolf\n",
       "6.800000e+05                      Abe's Market\n",
       "2.080000e+07                             ASSIA\n",
       "8.730000e+06                              ARPU\n",
       "1.000000e+09                               AOL\n",
       "1.344400e+06                           ADmantX\n",
       "6.567000e+06                       ACT Biotech\n",
       "2.490000e+08                      A123 Systems\n",
       "4.756600e+04                     7billionideas\n",
       "1.007000e+07                    41st Parameter\n",
       "9.390000e+05                              2sms\n",
       "Name: company_name, Length: 1458, dtype: object"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.company_name.groupby(df.raised_amount_usd).max().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Preferred Investment Location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AxesSubplot(0.125,0.125;0.775x0.755)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Preffered Investment Location')"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pref_loc = df.raised_amount_usd.groupby(df.company_state_code).count().sort_values(ascending = False).plot(kind='barh')\n",
    "print(pref_loc)\n",
    "plt.ylim(-1,7.5)\n",
    "plt.ylabel('State in USA')\n",
    "plt.xlabel('Count')\n",
    "plt.title('Preffered Investment Location')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Breakdown of Industries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.investor_category_code.groupby(df.investor_category_code).count().sort_values(ascending = False).plot(kind= 'bar', stacked= True, color='orange', label='Investor')\n",
    "df.company_category_code.groupby(df.company_category_code).count().sort_values(ascending = False).plot(kind= 'bar', stacked= True, color='green', label ='Company')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlim(-1,10.5)\n",
    "plt.title('Breakdown of the Industries')\n",
    "plt.xlabel('Investor/Company Category')\n",
    "plt.ylabel('Ratio of Investor to Company')\n",
    "plt.savefig(\"Industries.png\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "oyRpE4IcKtUX"
   },
   "outputs": [],
   "source": [
    "df=df.drop(['company_permalink','investor_permalink',\n",
    "       'investor_category_code',\n",
    "        'funded_at', 'funded_month', 'funded_quarter',\n",
    "       'funded_year','investor_state_code','investor_country_code','investor_city','raised_amount_usd'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 187
    },
    "colab_type": "code",
    "id": "-kWQ-JkdLNJk",
    "outputId": "7299eb44-8772-4d9f-e709-b98772cdae21"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company_name             11573\n",
       "company_category_code       43\n",
       "company_country_code         2\n",
       "company_state_code          50\n",
       "company_region             546\n",
       "company_city              1229\n",
       "investor_name            10465\n",
       "investor_region            585\n",
       "funding_round_type           9\n",
       "dtype: int64"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 187
    },
    "colab_type": "code",
    "id": "rpO--_a_LNGr",
    "outputId": "5d2ba28d-a9b3-48c8-d8c6-d5121fdc1909"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company_name               1\n",
       "company_category_code    643\n",
       "company_country_code       1\n",
       "company_state_code       492\n",
       "company_region             1\n",
       "company_city             533\n",
       "investor_name              2\n",
       "investor_region            2\n",
       "funding_round_type         3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "J1Il5K24LNES"
   },
   "outputs": [],
   "source": [
    "df=df.dropna(axis=0, subset=['company_category_code','company_state_code','company_country_code','company_region','company_city','funding_round_type','company_name','investor_name','investor_region'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 187
    },
    "colab_type": "code",
    "id": "vEenhpjmLNBY",
    "outputId": "bd066803-dac1-40e7-c40e-f809778785b5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company_name             0\n",
       "company_category_code    0\n",
       "company_country_code     0\n",
       "company_state_code       0\n",
       "company_region           0\n",
       "company_city             0\n",
       "investor_name            0\n",
       "investor_region          0\n",
       "funding_round_type       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "m3MQx2XPLM-g",
    "outputId": "f7a0309b-683b-4412-b47a-4a428b91d53d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(51468, 9)"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "13FioM2lLM7n",
    "outputId": "40322c43-b939-49cc-c44e-0ae47e3897de"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3824"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop_duplicates(subset='company_name', keep='first')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11058, 9)"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "hITHCC_GLmdF"
   },
   "outputs": [],
   "source": [
    "df1=df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 261
    },
    "colab_type": "code",
    "id": "qXopIDJ6LmaQ",
    "outputId": "da400857-0fbd-4d89-8e9f-291aedfcfc49"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_name</th>\n",
       "      <th>company_category_code</th>\n",
       "      <th>company_country_code</th>\n",
       "      <th>company_state_code</th>\n",
       "      <th>company_region</th>\n",
       "      <th>company_city</th>\n",
       "      <th>investor_name</th>\n",
       "      <th>investor_region</th>\n",
       "      <th>funding_round_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AdverCar</td>\n",
       "      <td>advertising</td>\n",
       "      <td>USA</td>\n",
       "      <td>CA</td>\n",
       "      <td>SF Bay</td>\n",
       "      <td>San Francisco</td>\n",
       "      <td>1-800-FLOWERS.COM</td>\n",
       "      <td>New York</td>\n",
       "      <td>series-a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LaunchGram</td>\n",
       "      <td>news</td>\n",
       "      <td>USA</td>\n",
       "      <td>CA</td>\n",
       "      <td>SF Bay</td>\n",
       "      <td>Mountain View</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ZoopShop</td>\n",
       "      <td>software</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>columbus</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>angel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>eFuneral</td>\n",
       "      <td>web</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Cleveland</td>\n",
       "      <td>Cleveland</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Tackk</td>\n",
       "      <td>web</td>\n",
       "      <td>USA</td>\n",
       "      <td>OH</td>\n",
       "      <td>Cleveland</td>\n",
       "      <td>Cleveland</td>\n",
       "      <td>10Xelerator</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  company_name company_category_code company_country_code company_state_code  \\\n",
       "0     AdverCar           advertising                  USA                 CA   \n",
       "1   LaunchGram                  news                  USA                 CA   \n",
       "3     ZoopShop              software                  USA                 OH   \n",
       "4     eFuneral                   web                  USA                 OH   \n",
       "5        Tackk                   web                  USA                 OH   \n",
       "\n",
       "  company_region   company_city      investor_name investor_region  \\\n",
       "0         SF Bay  San Francisco  1-800-FLOWERS.COM        New York   \n",
       "1         SF Bay  Mountain View        10Xelerator        Columbus   \n",
       "3       Columbus       columbus        10Xelerator        Columbus   \n",
       "4      Cleveland      Cleveland        10Xelerator        Columbus   \n",
       "5      Cleveland      Cleveland        10Xelerator        Columbus   \n",
       "\n",
       "  funding_round_type  \n",
       "0           series-a  \n",
       "1              other  \n",
       "3              angel  \n",
       "4              other  \n",
       "5              other  "
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gRT8vPP2PPe0"
   },
   "outputs": [],
   "source": [
    "def clean_data(x):\n",
    "    if isinstance(x, list):\n",
    "        return [str.lower(i.replace(\" \", \"\")) for i in x]\n",
    "    else:\n",
    "        if isinstance(x, str):\n",
    "            return str.lower(x.replace(\" \", \"\"))\n",
    "        else:\n",
    "            return ''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['company_name', 'company_category_code', 'company_country_code',\n",
       "       'company_state_code', 'company_region', 'company_city', 'investor_name',\n",
       "       'investor_region', 'funding_round_type'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Content Based Recommender System"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['company_category_code', 'company_country_code',\n",
    "       'company_state_code', 'company_region', 'company_city', 'investor_name',\n",
    "       'investor_region', 'funding_round_type']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "r45bkSzOO1xf"
   },
   "outputs": [],
   "source": [
    "for feature in features:\n",
    "    df1[feature] = df1[feature].apply(clean_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 261
    },
    "colab_type": "code",
    "id": "U8Qf-CHDO1ug",
    "outputId": "9025e266-681b-45d1-feda-7184591d3768"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_name</th>\n",
       "      <th>company_category_code</th>\n",
       "      <th>company_country_code</th>\n",
       "      <th>company_state_code</th>\n",
       "      <th>company_region</th>\n",
       "      <th>company_city</th>\n",
       "      <th>investor_name</th>\n",
       "      <th>investor_region</th>\n",
       "      <th>funding_round_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AdverCar</td>\n",
       "      <td>advertising</td>\n",
       "      <td>usa</td>\n",
       "      <td>ca</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>sanfrancisco</td>\n",
       "      <td>1-800-flowers.com</td>\n",
       "      <td>newyork</td>\n",
       "      <td>series-a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LaunchGram</td>\n",
       "      <td>news</td>\n",
       "      <td>usa</td>\n",
       "      <td>ca</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>mountainview</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ZoopShop</td>\n",
       "      <td>software</td>\n",
       "      <td>usa</td>\n",
       "      <td>oh</td>\n",
       "      <td>columbus</td>\n",
       "      <td>columbus</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>angel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>eFuneral</td>\n",
       "      <td>web</td>\n",
       "      <td>usa</td>\n",
       "      <td>oh</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Tackk</td>\n",
       "      <td>web</td>\n",
       "      <td>usa</td>\n",
       "      <td>oh</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>other</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  company_name company_category_code company_country_code company_state_code  \\\n",
       "0     AdverCar           advertising                  usa                 ca   \n",
       "1   LaunchGram                  news                  usa                 ca   \n",
       "3     ZoopShop              software                  usa                 oh   \n",
       "4     eFuneral                   web                  usa                 oh   \n",
       "5        Tackk                   web                  usa                 oh   \n",
       "\n",
       "  company_region  company_city      investor_name investor_region  \\\n",
       "0          sfbay  sanfrancisco  1-800-flowers.com         newyork   \n",
       "1          sfbay  mountainview        10xelerator        columbus   \n",
       "3       columbus      columbus        10xelerator        columbus   \n",
       "4      cleveland     cleveland        10xelerator        columbus   \n",
       "5      cleveland     cleveland        10xelerator        columbus   \n",
       "\n",
       "  funding_round_type  \n",
       "0           series-a  \n",
       "1              other  \n",
       "3              angel  \n",
       "4              other  \n",
       "5              other  "
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 85
    },
    "colab_type": "code",
    "id": "NB_0oFWMQx1z",
    "outputId": "8b7174e0-006d-4fb4-9817-becc583a954c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['company_name', 'company_category_code', 'company_country_code',\n",
       "       'company_state_code', 'company_region', 'company_city', 'investor_name',\n",
       "       'investor_region', 'funding_round_type'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "TsdFPWe3O1ow"
   },
   "outputs": [],
   "source": [
    "df['metric'] = df[['company_category_code', 'company_country_code',\n",
    "       'company_state_code', 'company_region', 'company_city', 'investor_name',\n",
    "       'investor_region', 'funding_round_type']].apply(lambda x: \" \".join(x), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 119
    },
    "colab_type": "code",
    "id": "yGPgINwAO1mJ",
    "outputId": "5a12f380-b5fe-44e8-87fc-0076bb9092e6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'software usa oh columbus columbus 10xelerator columbus angel'"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.metric[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['company_name', 'company_category_code', 'company_country_code',\n",
       "       'company_state_code', 'company_region', 'company_city', 'investor_name',\n",
       "       'investor_region', 'funding_round_type', 'metric'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df1.drop(['company_category_code', 'company_country_code',\n",
    "       'company_state_code', 'company_region', 'company_city', 'investor_name',\n",
    "       'investor_region', 'funding_round_type'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_name</th>\n",
       "      <th>metric</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AdverCar</td>\n",
       "      <td>advertising usa ca sfbay sanfrancisco 1-800-fl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LaunchGram</td>\n",
       "      <td>news usa ca sfbay mountainview 10xelerator col...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ZoopShop</td>\n",
       "      <td>software usa oh columbus columbus 10xelerator ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>eFuneral</td>\n",
       "      <td>web usa oh cleveland cleveland 10xelerator col...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Tackk</td>\n",
       "      <td>web usa oh cleveland cleveland 10xelerator col...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  company_name                                             metric\n",
       "0     AdverCar  advertising usa ca sfbay sanfrancisco 1-800-fl...\n",
       "1   LaunchGram  news usa ca sfbay mountainview 10xelerator col...\n",
       "3     ZoopShop  software usa oh columbus columbus 10xelerator ...\n",
       "4     eFuneral  web usa oh cleveland cleveland 10xelerator col...\n",
       "5        Tackk  web usa oh cleveland cleveland 10xelerator col..."
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11058, 21004)"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\n",
    "tfidf_matrix = tf.fit_transform(df2['metric'])\n",
    "tfidf_matrix.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics.pairwise import linear_kernel\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4., 1., 1., ..., 9., 9., 1.])"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cosine_sim[100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2= df2.reset_index()\n",
    "indices = pd.Series(df2.index, index=df2['company_name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def get_recommendations(company_name, cosine_sim=cosine_sim):\n",
    "    idx = indices[company_name]\n",
    "    sim_scores = list(enumerate(cosine_sim[idx]))\n",
    "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
    "    sim_scores = sim_scores[1:11]\n",
    "    company_indices = [i[0] for i in sim_scores]\n",
    "    return df['company_name'].iloc[company_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3763            Ceterix Orthopaedics\n",
       "3733                         Relypsa\n",
       "3736        KaloBios Pharmaceuticals\n",
       "3748                        Achaogen\n",
       "3751                         Igenica\n",
       "3752            Incline Therapeutics\n",
       "5055                 Crux Biomedical\n",
       "5219     Fundamental Applied Biology\n",
       "5934            Corium International\n",
       "11011                        NuMedii\n",
       "Name: company_name, dtype: object"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_recommendations(\"Rennovia\", cosine_sim)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3752        Incline Therapeutics\n",
       "1595                     Codexis\n",
       "1785          Pearl Therapeutics\n",
       "3736    KaloBios Pharmaceuticals\n",
       "3741                    Rennovia\n",
       "3748                    Achaogen\n",
       "3751                     Igenica\n",
       "3763        Ceterix Orthopaedics\n",
       "5108               AEGEA Medical\n",
       "9744        Relievant Medsystems\n",
       "Name: company_name, dtype: object"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_recommendations(\"Relypsa\", cosine_sim)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Collaborative Filtering model using KNN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df.dropna(axis=0, subset=['company_name', 'company_category_code', 'company_state_code','funding_round_type'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11058, 10)"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['company_name', 'company_category_code', 'company_country_code',\n",
       "       'company_state_code', 'company_region', 'company_city', 'investor_name',\n",
       "       'investor_region', 'funding_round_type', 'metric'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_name</th>\n",
       "      <th>company_category_code</th>\n",
       "      <th>company_country_code</th>\n",
       "      <th>company_state_code</th>\n",
       "      <th>company_region</th>\n",
       "      <th>company_city</th>\n",
       "      <th>investor_name</th>\n",
       "      <th>investor_region</th>\n",
       "      <th>funding_round_type</th>\n",
       "      <th>metric</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AdverCar</td>\n",
       "      <td>advertising</td>\n",
       "      <td>usa</td>\n",
       "      <td>ca</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>sanfrancisco</td>\n",
       "      <td>1-800-flowers.com</td>\n",
       "      <td>newyork</td>\n",
       "      <td>series-a</td>\n",
       "      <td>advertising usa ca sfbay sanfrancisco 1-800-fl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LaunchGram</td>\n",
       "      <td>news</td>\n",
       "      <td>usa</td>\n",
       "      <td>ca</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>mountainview</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>other</td>\n",
       "      <td>news usa ca sfbay mountainview 10xelerator col...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ZoopShop</td>\n",
       "      <td>software</td>\n",
       "      <td>usa</td>\n",
       "      <td>oh</td>\n",
       "      <td>columbus</td>\n",
       "      <td>columbus</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>angel</td>\n",
       "      <td>software usa oh columbus columbus 10xelerator ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>eFuneral</td>\n",
       "      <td>web</td>\n",
       "      <td>usa</td>\n",
       "      <td>oh</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>other</td>\n",
       "      <td>web usa oh cleveland cleveland 10xelerator col...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Tackk</td>\n",
       "      <td>web</td>\n",
       "      <td>usa</td>\n",
       "      <td>oh</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>other</td>\n",
       "      <td>web usa oh cleveland cleveland 10xelerator col...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Acclaimd</td>\n",
       "      <td>analytics</td>\n",
       "      <td>usa</td>\n",
       "      <td>oh</td>\n",
       "      <td>columbus</td>\n",
       "      <td>columbus</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>angel</td>\n",
       "      <td>analytics usa oh columbus columbus 10xelerator...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ToVieFor</td>\n",
       "      <td>ecommerce</td>\n",
       "      <td>usa</td>\n",
       "      <td>ny</td>\n",
       "      <td>newyork</td>\n",
       "      <td>newyork</td>\n",
       "      <td>2010nyusternbusinessplancompetition</td>\n",
       "      <td>unknown</td>\n",
       "      <td>angel</td>\n",
       "      <td>ecommerce usa ny newyork newyork 2010nyusternb...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>OHK Labs</td>\n",
       "      <td>sports</td>\n",
       "      <td>usa</td>\n",
       "      <td>fl</td>\n",
       "      <td>palmbeach</td>\n",
       "      <td>bocaraton</td>\n",
       "      <td>22hundredgroup</td>\n",
       "      <td>unknown</td>\n",
       "      <td>angel</td>\n",
       "      <td>sports usa fl palmbeach bocaraton 22hundredgro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Lovely</td>\n",
       "      <td>real_estate</td>\n",
       "      <td>usa</td>\n",
       "      <td>ca</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>sanfrancisco</td>\n",
       "      <td>3taps</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>series-a</td>\n",
       "      <td>real_estate usa ca sfbay sanfrancisco 3taps sf...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>peerTransfer</td>\n",
       "      <td>finance</td>\n",
       "      <td>usa</td>\n",
       "      <td>ma</td>\n",
       "      <td>boston</td>\n",
       "      <td>boston</td>\n",
       "      <td>500hats</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>angel</td>\n",
       "      <td>finance usa ma boston boston 500hats sfbay angel</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    company_name company_category_code company_country_code  \\\n",
       "0       AdverCar           advertising                  usa   \n",
       "1     LaunchGram                  news                  usa   \n",
       "3       ZoopShop              software                  usa   \n",
       "4       eFuneral                   web                  usa   \n",
       "5          Tackk                   web                  usa   \n",
       "6       Acclaimd             analytics                  usa   \n",
       "8       ToVieFor             ecommerce                  usa   \n",
       "9       OHK Labs                sports                  usa   \n",
       "10        Lovely           real_estate                  usa   \n",
       "11  peerTransfer               finance                  usa   \n",
       "\n",
       "   company_state_code company_region  company_city  \\\n",
       "0                  ca          sfbay  sanfrancisco   \n",
       "1                  ca          sfbay  mountainview   \n",
       "3                  oh       columbus      columbus   \n",
       "4                  oh      cleveland     cleveland   \n",
       "5                  oh      cleveland     cleveland   \n",
       "6                  oh       columbus      columbus   \n",
       "8                  ny        newyork       newyork   \n",
       "9                  fl      palmbeach     bocaraton   \n",
       "10                 ca          sfbay  sanfrancisco   \n",
       "11                 ma         boston        boston   \n",
       "\n",
       "                          investor_name investor_region funding_round_type  \\\n",
       "0                     1-800-flowers.com         newyork           series-a   \n",
       "1                           10xelerator        columbus              other   \n",
       "3                           10xelerator        columbus              angel   \n",
       "4                           10xelerator        columbus              other   \n",
       "5                           10xelerator        columbus              other   \n",
       "6                           10xelerator        columbus              angel   \n",
       "8   2010nyusternbusinessplancompetition         unknown              angel   \n",
       "9                        22hundredgroup         unknown              angel   \n",
       "10                                3taps           sfbay           series-a   \n",
       "11                              500hats           sfbay              angel   \n",
       "\n",
       "                                               metric  \n",
       "0   advertising usa ca sfbay sanfrancisco 1-800-fl...  \n",
       "1   news usa ca sfbay mountainview 10xelerator col...  \n",
       "3   software usa oh columbus columbus 10xelerator ...  \n",
       "4   web usa oh cleveland cleveland 10xelerator col...  \n",
       "5   web usa oh cleveland cleveland 10xelerator col...  \n",
       "6   analytics usa oh columbus columbus 10xelerator...  \n",
       "8   ecommerce usa ny newyork newyork 2010nyusternb...  \n",
       "9   sports usa fl palmbeach bocaraton 22hundredgro...  \n",
       "10  real_estate usa ca sfbay sanfrancisco 3taps sf...  \n",
       "11   finance usa ma boston boston 500hats sfbay angel  "
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing \n",
    "  \n",
    "le = preprocessing.LabelEncoder() \n",
    "\n",
    "df.company_category_code = le.fit_transform(df.company_category_code)\n",
    "df.company_state_code = le.fit_transform(df.company_state_code)\n",
    "df.funding_round_type= le.fit_transform(df.funding_round_type)\n",
    "\n",
    "features=list(zip(df.company_category_code,df.company_state_code,df.funding_round_type))\n",
    "\n",
    "label = le.fit_transform(df.company_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df\n",
    "\n",
    "df1.company_name = label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_name</th>\n",
       "      <th>company_category_code</th>\n",
       "      <th>company_country_code</th>\n",
       "      <th>company_state_code</th>\n",
       "      <th>company_region</th>\n",
       "      <th>company_city</th>\n",
       "      <th>investor_name</th>\n",
       "      <th>investor_region</th>\n",
       "      <th>funding_round_type</th>\n",
       "      <th>metric</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>307</td>\n",
       "      <td>0</td>\n",
       "      <td>usa</td>\n",
       "      <td>3</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>sanfrancisco</td>\n",
       "      <td>1-800-flowers.com</td>\n",
       "      <td>newyork</td>\n",
       "      <td>5</td>\n",
       "      <td>advertising usa ca sfbay sanfrancisco 1-800-fl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4964</td>\n",
       "      <td>26</td>\n",
       "      <td>usa</td>\n",
       "      <td>3</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>mountainview</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>2</td>\n",
       "      <td>news usa ca sfbay mountainview 10xelerator col...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10628</td>\n",
       "      <td>37</td>\n",
       "      <td>usa</td>\n",
       "      <td>33</td>\n",
       "      <td>columbus</td>\n",
       "      <td>columbus</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>0</td>\n",
       "      <td>software usa oh columbus columbus 10xelerator ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10742</td>\n",
       "      <td>41</td>\n",
       "      <td>usa</td>\n",
       "      <td>33</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>2</td>\n",
       "      <td>web usa oh cleveland cleveland 10xelerator col...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9047</td>\n",
       "      <td>41</td>\n",
       "      <td>usa</td>\n",
       "      <td>33</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>cleveland</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>2</td>\n",
       "      <td>web usa oh cleveland cleveland 10xelerator col...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>158</td>\n",
       "      <td>1</td>\n",
       "      <td>usa</td>\n",
       "      <td>33</td>\n",
       "      <td>columbus</td>\n",
       "      <td>columbus</td>\n",
       "      <td>10xelerator</td>\n",
       "      <td>columbus</td>\n",
       "      <td>0</td>\n",
       "      <td>analytics usa oh columbus columbus 10xelerator...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9405</td>\n",
       "      <td>7</td>\n",
       "      <td>usa</td>\n",
       "      <td>32</td>\n",
       "      <td>newyork</td>\n",
       "      <td>newyork</td>\n",
       "      <td>2010nyusternbusinessplancompetition</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>ecommerce usa ny newyork newyork 2010nyusternb...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>6285</td>\n",
       "      <td>38</td>\n",
       "      <td>usa</td>\n",
       "      <td>8</td>\n",
       "      <td>palmbeach</td>\n",
       "      <td>bocaraton</td>\n",
       "      <td>22hundredgroup</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>sports usa fl palmbeach bocaraton 22hundredgro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5239</td>\n",
       "      <td>32</td>\n",
       "      <td>usa</td>\n",
       "      <td>3</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>sanfrancisco</td>\n",
       "      <td>3taps</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>5</td>\n",
       "      <td>real_estate usa ca sfbay sanfrancisco 3taps sf...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10974</td>\n",
       "      <td>11</td>\n",
       "      <td>usa</td>\n",
       "      <td>18</td>\n",
       "      <td>boston</td>\n",
       "      <td>boston</td>\n",
       "      <td>500hats</td>\n",
       "      <td>sfbay</td>\n",
       "      <td>0</td>\n",
       "      <td>finance usa ma boston boston 500hats sfbay angel</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    company_name  company_category_code company_country_code  \\\n",
       "0            307                      0                  usa   \n",
       "1           4964                     26                  usa   \n",
       "3          10628                     37                  usa   \n",
       "4          10742                     41                  usa   \n",
       "5           9047                     41                  usa   \n",
       "6            158                      1                  usa   \n",
       "8           9405                      7                  usa   \n",
       "9           6285                     38                  usa   \n",
       "10          5239                     32                  usa   \n",
       "11         10974                     11                  usa   \n",
       "\n",
       "    company_state_code company_region  company_city  \\\n",
       "0                    3          sfbay  sanfrancisco   \n",
       "1                    3          sfbay  mountainview   \n",
       "3                   33       columbus      columbus   \n",
       "4                   33      cleveland     cleveland   \n",
       "5                   33      cleveland     cleveland   \n",
       "6                   33       columbus      columbus   \n",
       "8                   32        newyork       newyork   \n",
       "9                    8      palmbeach     bocaraton   \n",
       "10                   3          sfbay  sanfrancisco   \n",
       "11                  18         boston        boston   \n",
       "\n",
       "                          investor_name investor_region  funding_round_type  \\\n",
       "0                     1-800-flowers.com         newyork                   5   \n",
       "1                           10xelerator        columbus                   2   \n",
       "3                           10xelerator        columbus                   0   \n",
       "4                           10xelerator        columbus                   2   \n",
       "5                           10xelerator        columbus                   2   \n",
       "6                           10xelerator        columbus                   0   \n",
       "8   2010nyusternbusinessplancompetition         unknown                   0   \n",
       "9                        22hundredgroup         unknown                   0   \n",
       "10                                3taps           sfbay                   5   \n",
       "11                              500hats           sfbay                   0   \n",
       "\n",
       "                                               metric  \n",
       "0   advertising usa ca sfbay sanfrancisco 1-800-fl...  \n",
       "1   news usa ca sfbay mountainview 10xelerator col...  \n",
       "3   software usa oh columbus columbus 10xelerator ...  \n",
       "4   web usa oh cleveland cleveland 10xelerator col...  \n",
       "5   web usa oh cleveland cleveland 10xelerator col...  \n",
       "6   analytics usa oh columbus columbus 10xelerator...  \n",
       "8   ecommerce usa ny newyork newyork 2010nyusternb...  \n",
       "9   sports usa fl palmbeach bocaraton 22hundredgro...  \n",
       "10  real_estate usa ca sfbay sanfrancisco 3taps sf...  \n",
       "11   finance usa ma boston boston 500hats sfbay angel  "
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11058"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.company_name.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[232]\n",
      "['AdRoll']\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "\n",
    "#a = random.choice(df.company_category_code)\n",
    "#b = random.choice(df.company_state_code)\n",
    "#c = random.choice(df.funding_round_type)\n",
    "\n",
    "\n",
    "model = KNeighborsClassifier(n_neighbors=3)\n",
    "\n",
    "# Train the model using the training sets\n",
    "model.fit(features,label)\n",
    "\n",
    "#Predict Output\n",
    "#predicted= model.predict([[a,b,c]]) # 0:Overcast, 2:Mild\n",
    "predicted= model.predict([[0,3,5]])\n",
    "print(predicted)\n",
    "\n",
    "predicted = le.inverse_transform(predicted)\n",
    "print(predicted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3763     1782\n",
       "3733     7557\n",
       "3736     4751\n",
       "3748      176\n",
       "3751     4283\n",
       "3752     4360\n",
       "5055     2405\n",
       "5219     3529\n",
       "5934     2280\n",
       "11011    6256\n",
       "Name: company_name, dtype: int64"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_recommendations(\"Rennovia\", cosine_sim)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "Final_Shit",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
